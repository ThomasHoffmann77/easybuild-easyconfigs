# Thomas Hoffmann, EMBL Heidelber, structures-it@embl.de, 2023/07
easyblock = 'PythonBundle'

name = 'RFdiffusion'
version = '1.1.0'

homepage = 'https://github.com/RosettaCommons/RFdiffusion'
description = """RFdiffusion is an open source method for structure generation, with or without  
conditional information (a motif, target etc). It can perform a whole range of  
protein design challenges as we have outlined in the RFdiffusion paper          
https://www.biorxiv.org/content/10.1101/2022.12.09.519842v1

Model files are available in $RFDIFFUSION_MODELS"""

toolchain = {'name': 'foss', 'version': '2022a'}
toolchainopts = {}

_models_url = 'http://files.ipd.uw.edu/pub/RFdiffusion'
_pysp = '%(installdir)s/lib/python%(pyshortver)s/site-packages'
_models_dst = '%(installdir)s/models/'
_schedules_dst = '%(installdir)s/schedules/'

_models = [
    ("Base_ckpt.pt", "6f5902ac237024bdd0c176cb93063dc4"),
    ("Complex_base_ckpt.pt", "e29311f6f1bf1af907f9ef9f44b8328b"),
    ("Complex_Fold_base_ckpt.pt", "60f09a193fb5e5ccdc4980417708dbab"),
    ("InpaintSeq_ckpt.pt", "74f51cfb8b440f50d70878e05361d8f0"),
    ("InpaintSeq_Fold_ckpt.pt", "76d00716416567174cdb7ca96e208296"),
    ("ActiveSite_ckpt.pt", "5532d2e1f3a4738decd58b19d633b3c3"),
    ("Base_epoch8_ckpt.pt", "12fc204edeae5b57713c5ad7dcb97d39"),
    ("Complex_beta_ckpt.pt", "f572d396fae9206628714fb2ce00f72e"),
    ("RF_structure_prediction_weights.pt", "1befcb9b28e2f778f53d47f18b7597fa"),
]

components = [('schedules', version, {
    'easyblock': 'CmdCp',
    'source_urls': ['https://files.ipd.uw.edu/krypton/'],
    'sources': [{
        'filename': '%(name)s_v%(version)s.zip',
        'download_filename': '%(name)s.zip',
        'extract_cmd': 'unzip -j %s'
    }],
    'cmds_map': [('.*', '')],
    'files_to_copy': [(['*.pkl'], _schedules_dst)],
})]

checksums = [
    # schedules_v1.1.0.zip
    '9fbb47ddb92f1c0cf234bec39ba6ba64d179501fbff53a4d10b4e55afd75e44a',
    # Base_ckpt.pt
    '0fcf7d7c32b4848030aca3a051e6768de194616f96ba6c38186351a33bfc6eca',
    # Complex_base_ckpt.pt
    '76e4e260aefee3b582bd76b77ab95d2592e64f00c51bf344968ab9239f3250bc',
    # Complex_Fold_base_ckpt.pt
    '0ac3b4024aea811078cec41482528291d6d7d7084bf8190ec118f54642fb81a1',
    # InpaintSeq_ckpt.pt
    '3b71b2b954e87d46b75a88ba64e0420fbf27f592604b10b6c3561b8c8ab70ab6',
    # InpaintSeq_Fold_ckpt.pt
    '51849c9fe64c16a38fe41c75db76abe044e4d3493926f6cfd29a5bde0331b7cc',
    # ActiveSite_ckpt.pt
    'beca1f672049161df0bc6a2d2523828f19fd9c8a2b449988e246dde42e7ea986',
    # Base_epoch8_ckpt.pt
    'b8e5d57f0b8a8f8cb30779c106b75210b46a914a4d19fb180676ae647f5ae23d',
    # Complex_beta_ckpt.pt
    '5a0b1cafc23c60b1aabcec1e49391986ac4fd02cc1b6b4cc41714ca9fe882e9e',
    # RF_structure_prediction_weights.pt
    '6414e9e60b0b01011e5a182def40b4e6de4e137554c887b2916d43566733ed95',
]

components += [
    (_lname, _lver, {
        'easyblock': 'CmdCp',
        'source_urls': ['%s/%%(version)s/' % _models_url],
        'sources': [{
            'filename': '%(name)s_v%(version)s',
            'download_filename': '%(name)s',
            'extract_cmd': 'cp %s ' + _lname}],
        'cmds_map': [('.*', '')],
        'files_to_copy': [(['*.pt'], _models_dst)],
    }) for _lname, _lver in _models]

dependencies = [
    ('Python', '3.10.4'),
    ('wandb', '0.13.4'),
    ('PyTorch', '1.12.0'),
    ('e3nn', '0.3.3'),
    ('Hydra', '1.3.2'),
    ('DGL', '1.1.1'),
]

use_pip = True
sanity_pip_check = True
download_dep_fail = True

exts_list = [
    ('asttokens', '2.2.1', {
        'checksums': ['4622110b2a6f30b77e1473affaa97e711bc2f07d3f10848420ff1898edbe94f3'],
    }),
    ('executing', '1.2.0', {
        'checksums': ['19da64c18d2d851112f09c287f8d3dbbdf725ab0e569077efb6cdcbd3497c107'],
    }),
    ('icecream', '2.1.3', {
        'checksums': ['0aa4a7c3374ec36153a1d08f81e3080e83d8ac1eefd97d2f4fe9544e8f9b49de'],
    }),
    ('dllogger', '1.0.0', {
        'source_urls': ['https://github.com/NVIDIA/dllogger/archive/refs/tags'],
        'sources': ['v%(version)s.zip'],
        'checksums': ['07d0cd9b9b56f454f0c186a0889137e9f94e1979fca3d35911967c874c93c191'],
    }),
    ('pynvml', '11.5.0', {
        'checksums': ['d027b21b95b1088b9fc278117f9f61b7c67f8e33a787e9f83f735f0f71ac32d0'],
    }),
    ('SE3Transformer', version, {
        'modulename': 'se3_transformer',
        'source_tmpl': 'v%(version)s.tar.gz',
        'source_urls': ['https://github.com/RosettaCommons/RFdiffusion/archive/refs/tags/'],
        'start_dir': 'env/SE3Transformer',
        'checksums': ['57d82f0d43540c2912eda3f1d34ad90b13db14966ee069c427e217fe78f0297f'],
    }),
    (name, version, {
        'patches': [
            'RFdiffusion-1.1.0_setup.patch',
            'RFdiffusion-1.1.0_data_paths.patch',
        ],
        'source_urls': ['https://github.com/RosettaCommons/RFdiffusion/archive/refs/tags/'],
        'sources': [{'filename': '%(name)s-%(version)s.tar.gz', 'download_filename': 'v%(version)s.tar.gz'}],
        'checksums': [
            {'RFdiffusion-1.1.0.tar.gz': '57d82f0d43540c2912eda3f1d34ad90b13db14966ee069c427e217fe78f0297f'},
            {'RFdiffusion-1.1.0_setup.patch': '1d17fae9d4d3716814f0d9bb6587658590dc07772c87e92fb9ad81cda6a2539d'},
            {'RFdiffusion-1.1.0_data_paths.patch': '78461d7325d02bb7f1777aca84a53a39c1dd503aeb64b50ab37caba776bd3fd5'},
        ],
    }),
]

modextravars = {'RFDIFFUSION_MODELS': _models_dst}
postinstallcmds = [
    'cp -rpP config  %(installdir)s',
    'cp -rpP examples %(installdir)s',
    'cd %s/%%(namelower)s/ && ln -s ../../../../{models,schedules,examples}  .' % _pysp
]
sanity_check_commands = [
    "run_inference.py --help",
    "run_inference.py 'contigmap.contigs=[150-150]' " +
    "inference.output_prefix=test_outputs/test inference.num_designs=1"
]
sanity_check_paths = {
    'files': ['%s/%s' % (_models_dst, x) for (x, _) in _models],
    'dirs': [
        '%s/%%(namelower)s/inference' % _pysp,
        'examples',
        'schedules',
        'models',
        'config/inference']
}

moduleclass = 'bio'
